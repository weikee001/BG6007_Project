# process_data_spo2.py
# Library to support retrieving data from SpO2 raw video data

# Imports --------------------------------------------

import numpy as np
from scipy.signal import find_peaks
from matplotlib import pyplot as plt
from pathlib import Path
import cv2
import pandas as pd

# Flags --------------------------------------------

loadDataFlag = 0 # 0 for loading and computing from raw videos (and saving), 1 for loading from csvs in Data/Data

# Presets --------------------------------------------

dataLoc = './/data//raw-videos//raw' # extract as seen in README-videos.md
dataDir = Path.home().joinpath(Path.cwd().parent,dataLoc)
procLoc = './/data//data_csv' # processed data location
procDir = Path.home().joinpath(Path.cwd().parent,procLoc)
patientNums = np.arange(100001,100008,1)

# Functions --------------------------------------------

# Function to build left and right dirs based on a core dir
def createLtRt(dataDir):
    dataDirLt = dataDir  # or Path(dataDir) if needed
    dataDirRt = dataDir
    return [dataDirLt, dataDirRt]

# Function to return the path of a file
# given a directory, patient number and file type

def findFile(dataDir, patientNum, side):
    # side = 'left' or 'right'
    pattern = f"{patientNum}_{side}.mp4"
    files = list(dataDir.glob(pattern))
    if files:
        return files[0]
    else:
        return None


def find_fingertip_roi(image):
    # Thresholding (change thresholds as per your illumination)
    roi_mask = cv2.inRange(cv2.cvtColor(image, cv2.COLOR_BGR2HSV), (0, 20, 70), (20, 255, 255))
    contours, _ = cv2.findContours(roi_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if contours:
        c = max(contours, key=cv2.contourArea)
        x, y, w, h = cv2.boundingRect(c)
        # Take central square of bounding box
        pad = 10
        roi = image[y+pad:y+h-pad, x+pad:x+w-pad]
        return roi
    else:
        # fallback to center patch
        h, w, _ = image.shape
        c_x, c_y = w // 2, h // 2
        patch_size = 50
        roi = image[c_y-patch_size//2:c_y+patch_size//2, c_x-patch_size//2:c_x+patch_size//2]
        return roi
        
# Function to return an array of R, G, B values
# from a raw video input
# Output is array of average R, G, B for length of video
def getRawRGB(patientNum, dataDir, side):
    rawFile = findFile(dataDir, patientNum, side)
    if rawFile is None:
        raise FileNotFoundError(f"No video found for patient {patientNum} side={side}")
    
    cap = cv2.VideoCapture(str(rawFile))
    vidLen = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    rgbArray = np.zeros([vidLen, 3])
    print(f"Processing {rawFile.name} ...")

    count = 0
    success = True
    while count < vidLen and success:
        success, image = cap.read()
        if not success:
            break
        roi = find_fingertip_roi(image)
        B2 = np.mean(roi[:, :, 0])
        G1 = np.mean(roi[:, :, 1])
        R0 = np.mean(roi[:, :, 2])
        rgbArray[count] = [R0, G1, B2]
        count += 1
    return rgbArray

# Function to create and return a plot of the R, G, B values
def plotRGB(rgb, title):
    colors = ['red', 'green', 'blue']
    for i, color in enumerate(colors):
        plt.plot(rgb[:, i], color=color, label=color)
    plt.title(title)
    plt.xlabel('Frame')
    plt.ylabel('Average Value')
    plt.legend()
    return plt

# Function to save the processed RGB to a csv with a certain filename
# Inputs: RGB array to save, filename (subject num), path to save, handLabel ('Left'/'Right')
def saveRGB(rgb, fname, path, handLabel):
    """Save CSV with headers and PNG plot."""
    # Create folder if not exist
    path.mkdir(parents=True, exist_ok=True)
    
    # CSV with headers
    csvPath = path / f"{fname}.csv"
    df = pd.DataFrame(rgb, columns=['R','G','B'])
    df.to_csv(csvPath, index=False)
    
    # PNG
    pltObj = plotRGB(rgb, f"{fname} {handLabel}")
    pngPath = path / f"{fname}.png"
    pltObj.savefig(pngPath)
    pltObj.clf()
    
    return 0

# Function to walk through list of patient numbers and process them, saving their data as csvs and pngs
def procRawData(nums, dataDir, procDir, loadData=0):
    print(f"Processing raw data with loadDataFlag={loadData} ...")
    rgbData = {}

    for num in nums:
        RGB2 = {}
        for i, side in enumerate(['left', 'right']):
            handLabel = side.capitalize()
            sideDir = procDir / handLabel  # Save under Left/Right folder

            # Load or process
            if loadData == 0:
                RGB = getRawRGB(num, dataDir, side)
            else:
                # Implement loadCSV if needed
                raise NotImplementedError("Loading from CSV not implemented")

            saveRGB(RGB, str(num), sideDir, handLabel)
            RGB2[i] = RGB
        rgbData[num] = RGB2

    print(f"Files saved under {procDir}")
    return rgbData

# -------------------------------
# Run pipeline
# -------------------------------
if __name__ == "__main__":
  
    # Make sure these paths are correct
    dataDir = Path("data/raw-videos/raw")  # path to your mp4 files
    procDir = Path("data_csv")              # path where you want CSVs saved

    rgbData = procRawData(patientNums, dataDir, procDir, loadData=0)
    



